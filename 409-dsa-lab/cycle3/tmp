import java.util.Scanner;

class Node {
    int coefficient;
    int exponent;
    Node next;

    public Node(int coefficient, int exponent) {
        this.coefficient = coefficient;
        this.exponent = exponent;
        this.next = null;
    }
}

class Polynomial {
    private Node head;

    public Polynomial() {
        this.head = null;
    }

    public void insertTerm(int coefficient, int exponent) {
        Node newNode = new Node(coefficient, exponent);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.coefficient + "x^" + current.exponent);
            current = current.next;
            if (current != null) {
                System.out.print(" + ");
            }
        }
        System.out.println();
    }

    public Polynomial add(Polynomial p) {
        Polynomial result = new Polynomial();
        Node currentA = this.head;
        Node currentB = p.head;

        while (currentA != null && currentB != null) {
            if (currentA.exponent > currentB.exponent) {
                result.insertTerm(currentA.coefficient, currentA.exponent);
                currentA = currentA.next;
            } else if (currentA.exponent < currentB.exponent) {
                result.insertTerm(currentB.coefficient, currentB.exponent);
                currentB = currentB.next;
            } else {
                int sum = currentA.coefficient + currentB.coefficient;
                if (sum != 0) {
                    result.insertTerm(sum, currentA.exponent);
                }
                currentA = currentA.next;
                currentB = currentB.next;
            }
        }

        while (currentA != null) {
            result.insertTerm(currentA.coefficient, currentA.exponent);
            currentA = currentA.next;
        }

        while (currentB != null) {
            result.insertTerm(currentB.coefficient, currentB.exponent);
            currentB = currentB.next;
        }

        return result;
    }
}

public class AddPoly {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Polynomial p1 = new Polynomial();
        Polynomial p2 = new Polynomial();

        System.out.println("Polynomial Addition");
        System.out.println("-------------------");

        System.out.println("Enter Polynomial 1:");
        readPolynomial(scanner, p1);

        System.out.println("Enter Polynomial 2:");
        readPolynomial(scanner, p2);

        Polynomial sum = p1.add(p2);

        System.out.println("\nPolynomial 1:");
        p1.display();
        System.out.println("Polynomial 2:");
        p2.display();
        System.out.println("Sum:");
        sum.display();
    }

    private static void readPolynomial(Scanner scanner, Polynomial polynomial) {
        System.out.print("Enter the number of terms: ");
        int numTerms = scanner.nextInt();

        for (int i = 1; i <= numTerms; i++) {
            System.out.println("Term " + i + ":");
            System.out.print("Coefficient: ");
            int coefficient = scanner.nextInt();
            System.out.print("Exponent: ");
            int exponent = scanner.nextInt();

            polynomial.insertTerm(coefficient, exponent);
        }
    }
}
import java.util.Scanner;

class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    private Node head;
    private Node tail;

    public DoublyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void insertAtFront(int data) {
        Node newNode = new Node(data);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        System.out.println("Inserted " + data + " at the front.");
    }

    public void insertAtEnd(int data) {
        Node newNode = new Node(data);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        System.out.println("Inserted " + data + " at the end.");
    }

    public void deleteFromFront() {
        if (isEmpty()) {
            System.out.println("The list is empty.");
            return;
        }

        int data = head.data;

        if (head == tail) {
            head = null;
            tail = null;
        } else {
            head = head.next;
            head.prev = null;
        }

        System.out.println("Deleted " + data + " from the front.");
    }

    public void deleteFromEnd() {
        if (isEmpty()) {
            System.out.println("The list is empty.");
            return;
        }

        int data = tail.data;

        if (head == tail) {
            head = null;
            tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
        }

        System.out.println("Deleted " + data + " from the end.");
    }

    public void displayForward() {
        if (isEmpty()) {
            System.out.println("The list is empty.");
            return;
        }

        System.out.println("List elements (forward):");
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public void displayBackward() {
        if (isEmpty()) {
            System.out.println("The list is empty.");
            return;
        }

        System.out.println("List elements (backward):");
        Node current = tail;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.prev;
        }
        System.out.println();
    }
}

public class DLL {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        Scanner scanner = new Scanner(System.in);
        int choice = 0;

        while (choice != 7) {
            System.out.println("Doubly Linked List Menu:");
            System.out.println("1. Insert at the front");
            System.out.println("2. Insert at the end");
            System.out.println("3. Delete from the front");
            System.out.println("4. Delete from the end");
            System.out.println("5. Display list (forward)");
            System.out.println("6. Display list (backward)");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the element to insert at the front: ");
                    int elementToFront = scanner.nextInt();
                    list.insertAtFront(elementToFront);
                    break;
                case 2:
                    System.out.print("Enter the element to insert at the end: ");
                    int elementToEnd = scanner.nextInt();
                    list.insertAtEnd(elementToEnd);
                    break;
                case 3:
                    list.deleteFromFront();
                    break;
                case 4:
                    list.deleteFromEnd();
                    break;
                case 5:
                    list.displayForward();
                    break;
                case 6:
                    list.displayBackward();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
            System.out.println();
        }

        scanner.close();
    }
}
import java.util.Scanner;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Queue {
    private Node front;
    private Node rear;

    public Queue() {
        this.front = null;
        this.rear = null;
    }

    public boolean isEmpty() {
        return front == null;
    }

    public void enqueue(int data) {
        Node newNode = new Node(data);

        if (isEmpty()) {
            front = newNode;
            rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
        System.out.println("Enqueued element: " + data);
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1;
        }

        int data = front.data;
        front = front.next;

        if (front == null) {
            rear = null;
        }

        System.out.println("Dequeued element: " + data);
        return data;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1;
        }

        return front.data;
    }
}

public class QueueLinked {
    public static void main(String[] args) {
        Queue queue = new Queue();
        Scanner scanner = new Scanner(System.in);
        int choice = 0;

        while (choice != 4) {
            System.out.println("Queue Menu:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the element to enqueue: ");
                    int element = scanner.nextInt();
                    queue.enqueue(element);
                    break;
                case 2:
                    queue.dequeue();
                    break;
                case 3:
                    int frontElement = queue.peek();
                    if (frontElement != -1) {
                        System.out.println("Front element: " + frontElement);
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
            System.out.println();
        }

        scanner.close();
    }
}
